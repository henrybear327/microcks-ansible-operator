---
# tasks file for microcks

- name: Get information about the cluster
  set_fact:
    api_groups: "{{ lookup('k8s', cluster_info='api_groups') }}"

# Because we are passing through some yaml directly to Kubernetes resources, we have to retain the camelCase keys.
# All CR parameters are converted to snake_case, but the original yaml is found in the special _microcks_github_io_microcksinstall param.
# We need to copy that original yaml into our vars where appropriate to keep the camelCase.

- name: Get the original CR as-is for the camelCase keys
  set_fact:
    current_cr: "{{ _microcks_github_io_microcksinstall }}"


# ================================================================
# Start with optional MongoDB components
# ================================================================

- name: Get an existing MongoDB Secret
  when: mongodb.secret_ref is not defined
  k8s_facts:
    api_version: v1
    kind: Secret
    name: "{{name}}-mongodb-connection"
    namespace: '{{ meta.namespace }}'
  register: mongodb_secret

- name: The MongoDB Secret is present
  when: mongodb_secret.resources is defined and mongodb_secret.resources|length == 0
  k8s:
    state: present
    force: False
    definition: "{{ lookup('template', 'mongodb-secret.yml') | from_yaml  }}"

- name: The MongoDB PVC is present
  when: mongodb.install|bool and mongodb.persistent|bool
  k8s:
    state: present
    force: False
    definition: "{{ lookup('template', 'mongodb-pvc.yml') | from_yaml  }}"

- name: The MongoDB Deployment is present if mongodb.install == true
  when: mongodb.install|bool
  k8s:
    state: "{{ 'present' if mongodb.install|bool else 'absent' }}"
    definition: "{{ lookup('template', 'mongodb-deployment.yml') | from_yaml  }}"

- name: The MongoDB Service is present if mongodb.install == true
  when: mongodb.install|bool
  k8s:
    state: "{{ 'present' if mongodb.install|bool else 'absent' }}"
    definition: "{{ lookup('template', 'mongodb-service.yml') | from_yaml  }}"


# ================================================================
# We have to determine routes before proceeding with configuration
# ================================================================

- name: The Microcks Route is present if OpenShift
  when: "'route.openshift.io' in api_groups"
  k8s:
    state: present
    definition: "{{ lookup('template', 'microcks-route.yml') | from_yaml  }}"

- name: The Microcks GRPC Route is present if OpenShift
  when: "'route.openshift.io' in api_groups"
  k8s:
    state: present
    definition: "{{ lookup('template', 'microcks-grpc-route.yml') | from_yaml  }}"

- name: The Microks Ingress certs key is present if Kubernetes
  when: microcks.ingress_secret_ref is undefined or microcks.ingress_secret_ref|length == 0
  stat: 
    path: microcks-ingress.key
  register: microcks_ingress_certs

- name: The Microks Ingress certs are generated if Kubernetes and generate_cert
  when: "'route.openshift.io' not in api_groups and microcks.generate_cert == True and microcks_ingress_certs.stat is defined and microcks_ingress_certs.stat.exists == False"
  command: openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout microcks-ingress.key -out microcks-ingress.crt -subj "/CN={{microcks.url}}/O={{microcks.url}}"

- name: Get an existing Microcks Ingress Secret
  when: microcks.ingress_secret_ref is undefined or microcks.ingress_secret_ref|length == 0
  k8s_facts:
    api_version: v1
    kind: Secret
    name: "{{name}}-microcks-ingress-secret"
    namespace: '{{ meta.namespace }}'
  register: microcks_ingress_secret

- name: The Microcks Ingress secret is present if Kubernetes and generate_cert
  when: "'route.openshift.io' not in api_groups and microcks.generate_cert == True and microcks_ingress_secret.resources is defined and microcks_ingress_secret.resources|length == 0"
  k8s:
    state: present
    force: False
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{name}}-microcks-ingress-secret"
        namespace: '{{ meta.namespace }}'
        labels:
          app: "{{name}}"
          group: microcks
      type: Opaque
      stringData:
        tls.key: "{{ lookup('file', 'microcks-ingress.key') }}"
        tls.crt: "{{ lookup('file', 'microcks-ingress.crt') }}"

- name: The Microcks Ingress is present if Kubernetes
  when: "'route.openshift.io' not in api_groups"
  k8s:
    state: present
    definition: "{{ lookup('template', 'microcks-ingress.yml') | from_yaml  }}"

- name: The Microcks GRPC Ingress is present if Kubernetes
  when: "'route.openshift.io' not in api_groups"
  k8s:
    state: present
    definition: "{{ lookup('template', 'microcks-grpc-ingress.yml') | from_yaml  }}"

- name: Get the existing Microcks Route
  when: "'url' not in microcks and 'route.openshift.io' in api_groups"
  k8s_facts:
    api_version: route.openshift.io/v1
    kind: Route
    name: "{{name}}"
    namespace: '{{ meta.namespace }}'
  register: microcks_route

- name: Get the existing Microcks Ingress
  when: "'url' not in microcks and 'route.openshift.io' not in api_groups"
  k8s_facts:
    api_version: extensions/v1beta1
    kind: Ingress
    name: "{{name}}"
    namespace: '{{ meta.namespace }}'
  register: microcks_ingress

- name: Define microcks_url from CustomResource
  when: "'url' in microcks"
  set_fact:
    microcks_url: "{{ microcks.url }}"

- name: Define microcks_url from default Route or Ingress
  when: "'url' not in microcks"
  set_fact:
    microcks_url: "{{ (microcks_route.resources|first).spec.host if microcks_route is defined else ((microcks_ingress.resources|first).spec.rules|first).host }}"


# ================================================================
# Next deal with optional Keycloak components
# ================================================================

- name: The Keycloak PVC is present
  when: keycloak.install|bool and keycloak.persistent|bool
  k8s:
    state: present
    force: False
    definition: "{{ lookup('template', 'keycloak-pvc.yml') | from_yaml  }}"

- name: The Keycloak PostgreSQL Deployment is present if keycloak.install == true
  k8s:
    state: "{{ 'present' if keycloak.install|bool else 'absent' }}"
    definition: "{{ lookup('template', 'keycloak-postgres-deployment.yml') | from_yaml  }}"

- name: The Keycloak PostgreSQL Service is present if keycloak.install == true
  k8s:
    state: "{{ 'present' if keycloak.install|bool else 'absent' }}"
    definition: "{{ lookup('template', 'keycloak-postgres-service.yml') | from_yaml  }}"

- name: The Keycloak ConfigMap is present if keycloak.install == true
  k8s:
    state: "{{ 'present' if keycloak.install|bool else 'absent' }}"
    definition: "{{ lookup('template', 'keycloak-config.yml') | from_yaml  }}"

- name: Get an existing Keycloak Secret
  k8s_facts:
    api_version: v1
    kind: Secret
    name: "{{name}}-keycloak-admin"
    namespace: '{{ meta.namespace }}'
  register: keycloak_secret

- name: The Keycloak Secret is present if keycloak.install == true
  when: keycloak_secret.resources|length == 0 or not keycloak.install|bool
  k8s:
    state: "{{ 'present' if keycloak.install|bool else 'absent' }}"
    force: False
    definition: "{{ lookup('template', 'keycloak-secret.yml') | from_yaml  }}"

- name: The Keycloak Route is present if keycloak.install == true and OpenShift
  when: keycloak.install == true and 'route.openshift.io' in api_groups
  k8s:
    state: "{{ 'present' if keycloak.install|bool else 'absent' }}"
    definition: "{{ lookup('template', 'keycloak-route.yml') | from_yaml  }}"

- name: The Keycloak Ingress certs key is present if keycloak.install == true and Kubernetes
  when: keycloak.ingress_secret_ref is undefined or keycloak.ingress_secret_ref|length == 0
  stat: 
    path: keycloak-ingress.key
  register: keycloak_ingress_certs

- name: The Keycloak Ingress certs are generated if keycloak.install == true and Kubernetes and generate_cert
  when: keycloak.install == true and 'route.openshift.io' not in api_groups and keycloak.generate_cert == True and keycloak_ingress_certs.stat is defined and keycloak_ingress_certs.stat.exists == False
  command: openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout keycloak-ingress.key -out keycloak-ingress.crt -subj "/CN={{keycloak.url}}/O={{keycloak.url}}"

- name: Get an existing Keycloak Ingress Secret
  when: keycloak.ingress_secret_ref is undefined or keycloak.ingress_secret_ref|length == 0
  k8s_facts:
    api_version: v1
    kind: Secret
    name: "{{name}}-keycloak-ingress-secret"
    namespace: '{{ meta.namespace }}'
  register: keycloak_ingress_secret

- name: The Keycloak Ingress secret is present if keycloak.install == true and Kubernetes and generate_cert
  when: keycloak.install == true and 'route.openshift.io' not in api_groups and keycloak.generate_cert == True and keycloak_ingress_secret.resources is defined and keycloak_ingress_secret.resources|length == 0
  k8s:
    state: present
    force: False
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{name}}-keycloak-ingress-secret"
        namespace: '{{ meta.namespace }}'
        labels:
          app: "{{name}}"
          group: microcks
      type: Opaque
      stringData:
        tls.key: "{{ lookup('file', 'keycloak-ingress.key') }}"
        tls.crt: "{{ lookup('file', 'keycloak-ingress.crt') }}"

- name: The Keycloak Ingress is present if keycloak.install == true and Kubernetes
  when: keycloak.install == true and 'route.openshift.io' not in api_groups
  k8s:
    state: "{{ 'present' if keycloak.install|bool else 'absent' }}"
    namespace: '{{ meta.namespace }}'
    definition: "{{ lookup('template', 'keycloak-ingress.yml') | from_yaml  }}"

- name: Get the existing Keycloak Route
  when: "keycloak.install == true and 'url' not in keycloak and 'route.openshift.io' in api_groups"
  k8s_facts:
    api_version: route.openshift.io/v1
    kind: Route
    name: "{{name}}-keycloak"
    namespace: '{{ meta.namespace }}'
  register: keycloak_route

- name: Get the existing Keycloak Ingress
  when: "keycloak.install == true and 'url' not in keycloak and 'route.openshift.io' not in api_groups"
  k8s_facts:
    api_version: extensions/v1beta1
    kind: Ingress
    name: "{{name}}-keycloak"
    namespace: '{{ meta.namespace }}'
  register: keycloak_ingress

- name: Define keycloak_url from default Route or Ingress
  when: "keycloak.install == true and 'url' not in keycloak"
  set_fact:
    keycloak_url: "{{ (keycloak_route.resources|first).spec.host if keycloak_route is defined else ((keycloak_ingress.resources|first).spec.rules|first).host }}"

- name: The Keycloak Deployment is present if keycloak.install == true
  k8s:
    state: "{{ 'present' if keycloak.install|bool else 'absent' }}"
    definition: "{{ lookup('template', 'keycloak-deployment.yml') | from_yaml  }}"

- name: The Keycloak Service is present if keycloak.install == true
  k8s:
    state: "{{ 'present' if keycloak.install|bool else 'absent' }}"
    definition: "{{ lookup('template', 'keycloak-service.yml') | from_yaml  }}"


# ================================================================
# Next deal with optional Kafka broker
# ================================================================

- name: The Kafka CR is present if features.async.enabled == true and features.async.kafka.install == true
  when: "features.async.enabled == true" 
  k8s:
    state: "{{ 'present' if features.async.enabled|bool and features.async.kafka.install|bool else 'absent' }}"
    definition: "{{ lookup('template', 'kafka.yml') | from_yaml  }}"

- name: The Kafka Topic is present if features.async.enabled == true and features.async.kafka.install == true
  when: "features.async.enabled == true" 
  k8s:
    state: "{{ 'present' if features.async.enabled|bool and features.async.kafka.install|bool else 'absent' }}"
    definition: "{{ lookup('template', 'kafka-topic.yml') | from_yaml  }}"


# ================================================================
# Finish with pure Microcks components
# ================================================================

- name: The Microks GRPC certs key is present
  when: microcks.grpc_secret_ref is undefined or microcks.grpc_secret_ref|length == 0
  stat: 
    path: microcks-grpc.key
  register: microcks_grpc_certs

- name: The Microcks GRPC SAN config is present
  template:
    src: microcks-grpc-san.j2
    dest: microcks-grpc.cnf

- name: The Microks GRPC certs are generated
  when: "microcks_grpc_certs.stat is defined and microcks_grpc_certs.stat.exists == False"
  command: openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout microcks-grpc.key -out microcks-grpc.crt -subj "/CN={{microcks_url}}" -extensions san -config microcks-grpc.cnf

- name: Get an existing Microcks GRPC Secret
  when: microcks.grpc_secret_ref is undefined or microcks.grpc_secret_ref|length == 0
  k8s_facts:
    api_version: v1
    kind: Secret
    name: "{{name}}-microcks-grpc-secret"
    namespace: '{{ meta.namespace }}'
  register: microcks_grpc_secret

- name: The Microcks GRPC secret is present
  when: "microcks_grpc_secret.resources is defined and microcks_grpc_secret.resources|length == 0"
  k8s:
    state: present
    force: False
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{name}}-microcks-grpc-secret"
        namespace: '{{ meta.namespace }}'
        labels:
          app: "{{name}}"
          group: microcks
      type: Opaque
      stringData:
        tls.key: "{{ lookup('file', 'microcks-grpc.key') }}"
        tls.crt: "{{ lookup('file', 'microcks-grpc.crt') }}"

- name: The Microcks ConfigMap object is present
  k8s:
    state: present
    definition: "{{ lookup('template', 'microcks-config.yml') | from_yaml  }}"

- name: The Microcks Deployment is present
  k8s:
    state: present
    definition: "{{ lookup('template', 'microcks-deployment.yml') | from_yaml  }}"

- name: The Microcks Service is present
  k8s:
    state: present
    definition: "{{ lookup('template', 'microcks-service.yml') | from_yaml  }}"

- name: The Microcks GRPC Service is present
  k8s:
    state: present
    definition: "{{ lookup('template', 'microcks-grpc-service.yml') | from_yaml  }}"

- name: The Postman-runtime Deployment is present
  k8s:
    state: present
    definition: "{{ lookup('template', 'postman-runtime-deployment.yml') | from_yaml  }}"

- name: The Postman-runtime Service is present
  k8s:
    state: present
    definition: "{{ lookup('template', 'postman-runtime-service.yml') | from_yaml  }}"

- name: The Async-minion ConfigMap is present if features.async.enabled == true
  k8s:
    state: "{{ 'present' if features.async.enabled|bool else 'absent' }}"
    definition: "{{ lookup('template', 'async-minion-config.yml') | from_yaml  }}"

- name: The Async-minion Deployment is present if features.async.enabled == true
  k8s:
    state: "{{ 'present' if features.async.enabled|bool else 'absent' }}"
    definition: "{{ lookup('template', 'async-minion-deployment.yml') | from_yaml  }}"

- name: The Async-minion Service is present if features.async.enabled == true
  k8s:
    state: "{{ 'present' if features.async.enabled|bool else 'absent' }}"
    definition: "{{ lookup('template', 'async-minion-service.yml') | from_yaml  }}"
