---
# defaults specification file for microcks installation
name: microcks
version: "1.5.1"
microcks: 
  replicas: 1
  #url: microcks.192.168.99.100.nip.io
  #ingress_annotations:
    #cert-manager.io/issuer: my-cert-issuer
    #kubernetes.io/tls-acme: "true"
    #kubernetes.io/ingress.class: nginx
    #cert-utils-operator.redhat-cop.io/certs-from-secret: my-cert-secret
  #grpc_ingress_annotations:
    #kubernetes.io/ingress.class: nginx
  generate_cert: true
  resources:
    requests:
      cpu: 200m
      #memory: 400Mi
    limits:
      #cpu: 500m
      memory: 512Mi
  #log_level: TRACE | DEBUG | INFO | WARN
  log_level: INFO
  #true | false
  mock_invocation_stats: true
  openshift:
    route:
      enabled: true
      type: edge
      #key: |-
        #-----BEGIN PRIVATE KEY-----
        #[...]
        #-----END PRIVATE KEY-----
      #certificate: |-
        #-----BEGIN CERTIFICATE-----
        #[...]
        #-----END CERTIFICATE-----
      #ca_certificate: |-
        #-----BEGIN CERTIFICATE-----
        #[...]
        #-----END CERTIFICATE-----
      #destination_c_a_certificate: |-
        #-----BEGIN CERTIFICATE-----
        #[...]
        #-----END CERTIFICATE-----

postman:
  replicas: 1

keycloak:
  install: true
  realm: microcks
  image: jboss/keycloak:14.0.0
  #url: keycloak.192.168.99.100.nip.io
  #url: microcks-keycloak:8080
  #public_url: https://keycloak-microcks.192.168.64.6.nip.io/auth
  #ingress_annotations:
    #cert-manager.io/issuer: my-cert-issuer
    #kubernetes.io/tls-acme: "true"
    #kubernetes.io/ingress.class: nginx
  generate_cert: true
  
  resources:
    requests:
      cpu: 400m
      memory: 400Mi
    #limits:
      #cpu: 500m
      #memory: 512Mi
  service_account: microcks-serviceaccount
  service_account_credentials: ab54d329-e435-41ae-a900-ec6b3fe15c54

  persistent: true
  volume_size: 1Gi
  #storage_class_name: my-awesome-class
  postgres_image: centos/postgresql-95-centos7:latest
  openshift:
    route:
      enabled: true
      type: edge
      #key: |-
        #-----BEGIN PRIVATE KEY-----
        #[...]
        #-----END PRIVATE KEY-----
      #certificate: |-
        #-----BEGIN CERTIFICATE-----
        #[...]
        #-----END CERTIFICATE-----
      #ca_certificate: |-
        #-----BEGIN CERTIFICATE-----
        #[...]
        #-----END CERTIFICATE-----
      #destination_c_a_certificate: |-
        #-----BEGIN CERTIFICATE-----
        #[...]
        #-----END CERTIFICATE-----

mongodb:
  install: true
  #uri: mongodb:27017
  #uri_parameters: ?ssl=true
  #database: sampledb
  persistent: true
  volume_size: 2Gi
  #storage_class_name: my-awesome-class
  image: centos/mongodb-34-centos7:latest
  resources:
    #requests:
      #cpu: 250m
      #memory: 400Mi
    limits:
      #cpu: 500m
      memory: 512Mi

features:
  repository_filter:
    enabled: false
    label_key: domain
    label_label: Domain
    label_list: domain,status
  repository_tenancy:
    enabled: false
    artifact_import_allowed_roles: admin,manager,manager-any
  microcks_hub:
    enabled: false
    allowed_roles: admin,manager,manager-any
  async:
    enabled: false
    default_binding: KAFKA
    default_frequency: 10
    default_avro_encoding: RAW
    kafka:
      install: true
      #url: 192.168.99.100.nip.io
      use_strimzi_beta1: false
      persistent: false
      volume_size: 2Gi
      resources:
        #requests:
          #cpu: 100m
          #memory: 256Mi
        limits:
          #cpu: 500m
          memory: 800Mi
      zk_resources:
        #requests:
          #cpu: 100m
          #memory: 256Mi
        limits:
          #cpu: 500m
          memory: 800Mi
      schema_registry:
        #url: https://schema-registry.192.168.99.100.nip.io
        confluent: true
        #username: microcks
        credentials_source: USER_INFO

      # If you choose not to install a Kafka broker and reuse on pre-existing,
      # you may need to set some authentication parameters.
      authentication:
        # If not 'none', we support 'SSL' for mutual TLS and 'SASL_SSL' for SASL over TLS.
        type: none #SSL #SASL_SSL
        # For TLS transport, you'll always need a truststore to hold your cluster certificate.
        # You have to setup a truststore type and a secret reference for retrieving content and password.
        truststore_type: PKCS12
        #truststore_secret_ref:
          #secret: kafka-cluster-ca-cert
          #store_key: ca.p12
          #password_key: ca.password
        # For mutual TLS authentication, you'll also need a keystore to hold your user private key.
        # You have to setup a keystore type and a secret reference for retrieving content and password.
        keystore_type: PKCS12
        keystore_secret_ref:
          secret: mtls-user
          store_key: user.p12
          password_key: user.password
        # For SASL authentication, you'll have to specify an additional authentication mechanism
        # as well as a JAAS configuration line with login module, username and password.
        #sasl_mechanism: SCRAM-SHA-512
        #sasl_jaas_config: org.apache.kafka.common.security.scram.ScramLoginModule required username="scram-user" password="tDtDCT3pYKE5";

    mqtt:
      #url:
      username: microcks
      password: microcks

    amqp:
      #url:
      username: microcks
      password: microcks

    ws:
      #ingress_annotations:
        #cert-manager.io/issuer: my-cert-issuer
        #kubernetes.io/tls-acme: "true"
        #kubernetes.io/ingress.class: nginx
        #cert-utils-operator.redhat-cop.io/certs-from-secret: my-cert-secret
      generate_cert: true
      openshift:
        route:
          enabled: true
          type: edge
          #key: |-
            #-----BEGIN PRIVATE KEY-----
            #[...]
            #-----END PRIVATE KEY-----
          #certificate: |-
            #-----BEGIN CERTIFICATE-----
            #[...]
            #-----END CERTIFICATE-----
          #ca_certificate: |-
            #-----BEGIN CERTIFICATE-----
            #[...]
            #-----END CERTIFICATE-----
          #destination_c_a_certificate: |-
            #-----BEGIN CERTIFICATE-----
            #[...]
            #-----END CERTIFICATE-----<