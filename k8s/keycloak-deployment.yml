kind: Deployment
apiVersion: apps/v1
metadata:
  name: "{{name}}-keycloak"
  namespace: '{{ meta.namespace }}'
  labels:
    app: "{{name}}"
    container: keycloak
    group: microcks
    app.kubernetes.io/name: microcks-keycloak
    app.kubernetes.io/instance: "microcks-keycloak-{{name}}"
    app.kubernetes.io/version: "{{version}}"
    app.kubernetes.io/component: keycloak
    app.kubernetes.io/part-of: "{{name}}"
    app.kubernetes.io/managed-by: microcks-operator
    app.openshift.io/runtime: sso
  annotations:
    app.openshift.io/connects-to: "{{name}}-keycloak-postgresql-microcks"
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector: 
    matchLabels:  
      app: "{{name}}"
      deploymentconfig: keycloak
      container: keycloak
      group: microcks
  template:
    metadata:
      labels:
        app: "{{name}}"
        deploymentconfig: keycloak
        container: keycloak
        group: microcks
    spec:
      containers:
      - name: keycloak-server
        image: {{keycloak.image}}
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: jolokia
          containerPort: 8778
          protocol: TCP
        args:
        - 'start'
        - '--features=token-exchange'
        - '--db=$(KC_DB)'
        - '--db-url-host=$(KC_DB_URL_HOST)'
        - '--db-username=$(KC_DB_USER)'
        - '--db-password=$(KC_DB_PASSWORD)'
        {% if keycloak.private_url is defined -%}
        - '--hostname={{ keycloak.url }}'
        - '--hostname-strict-backchannel=false'
        {% else -%}
        - '--hostname={{ keycloak.url }}'
        {% endif -%}
        - '--health-enabled=true'
        - '--import-realm'
        env:
        - name: INTERNAL_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: KEYCLOAK_ADMIN
          valueFrom:
            secretKeyRef:
              key: username
              name: "{{name}}-keycloak-admin"
        - name: KEYCLOAK_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: "{{name}}-keycloak-admin"
        - name: OPERATING_MODE
          value: clustered
        - name: KC_DB
          value: postgres
        - name: KC_DB_USER
          valueFrom:
            secretKeyRef:
              key: postgresUsername
              name: "{{name}}-keycloak-admin"
        - name: KC_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: postgresPassword
              name: "{{name}}-keycloak-admin"
        - name: KC_DB_URL_DATABASE
          value: root
        - name: KC_DB_URL_HOST
          value: "{{name}}-keycloak-postgresql"
        - name: OPENSHIFT_KUBE_PING_LABELS
          value: deploymentconfig=keycloak
        - name: OPENSHIFT_KUBE_PING_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KC_PROXY
          value: "edge"
        {% if keycloak.private_url is defined -%}
        - name: KEYCLOAK_FRONTEND_URL
          value: https://{{keycloak.url|default(keycloak_url)}}/auth
        {% endif -%}
        resources:
          {{keycloak.resources | to_nice_yaml(indent=10) | trim | indent(10) }}
        livenessProbe:
          httpGet:
            path: "/health/live"
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 2
          periodSeconds: 20
          successThreshold: 1
          failureThreshold: 5
        readinessProbe:
          httpGet:
            path: "/health/ready"
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          timeoutSeconds: 2
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 5
        volumeMounts:
        - name: "{{name}}-keycloak-config"
          mountPath: "/opt/keycloak/data/import"
        securityContext:
          privileged: false
      volumes:
      - name: "{{name}}-keycloak-config"
        configMap:
          name: "{{name}}-keycloak-config"
      restartPolicy: Always
      dnsPolicy: ClusterFirst